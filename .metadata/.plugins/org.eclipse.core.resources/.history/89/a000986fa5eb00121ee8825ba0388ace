/*
 * Document confidentiel - Diffusion interdite 
 */
package fr.pokerfan.pta.server;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;

import org.apache.commons.lang.math.NumberUtils;
import org.apache.commons.logging.impl.Log4JLogger;

import fr.pokerfan.pta.bo.PTAConstantes;
import fr.pokerfan.pta.server.manager.Manager;
import fr.pokerfan.pta.server.manager.ManagerFactory;
import fr.pokerfan.pta.server.reader.PTABufferedReader;

/**
 * 1 Thread = 1 connection
 * 
 * @author pierre.kerichard
 * 
 */
public class PTAThread implements Runnable {

	private static final Log4JLogger LOGGER = new Log4JLogger(PTAThread.class
			.getCanonicalName());

	private Socket socket;

	/**
	 * Constructeur
	 * 
	 * @param socket
	 *            socket
	 */
	public PTAThread(final Socket socket) {
		this.socket = socket;
	}

	/**
	 * 
	 * {@inheritDoc}
	 */
	@Override
	public void run() {
		PTAThread.LOGGER.debug("Démarrage du thread");
		try {
			/*
			 * final PropertyManager props = new PropertyManager(
			 * PropertyManager.CONTEXT_READER); XMLStreamReader xmlReader; //
			 * Attente de l'envoi des données par le client while (true) { if
			 * (socket.getInputStream().available() > 1) { // Création du reader
			 * xmlReader = new XMLStreamReaderImpl( socket.getInputStream(),
			 * props); break; }
			 * 
			 * }
			 * 
			 * // NPE safe if (xmlReader != null) { // Parcours des élements
			 * while (xmlReader.hasNext()) { switch (xmlReader.getEventType()) {
			 * case XMLStreamConstants.START_DOCUMENT:
			 * PTAThread.LOGGER.info("Start of document"); break; case
			 * XMLStreamConstants.START_ELEMENT:
			 * PTAThread.LOGGER.info("Start element : " + xmlReader.getName());
			 * break; case XMLStreamConstants.END_ELEMENT:
			 * PTAThread.LOGGER.info("End element : " + xmlReader.getName());
			 * break; case XMLStreamConstants.CHARACTERS:
			 * PTAThread.LOGGER.info("Characters : " + xmlReader.getText());
			 * break; default: PTAThread.LOGGER.info("Default : " +
			 * xmlReader.getEventType()); break; } xmlReader.next(); }
			 * 
			 * 
			 * PTAThread.LOGGER.info("End of document"); xmlReader.close();
			 * 
			 * PTAThread.LOGGER.info("Fermeture de l'input stream");
			 * socket.getInputStream().close();
			 * 
			 * }
			 */
			// création du reader
			final PTABufferedReader reader = new PTABufferedReader(
					new InputStreamReader(socket.getInputStream()));

			// Récuperation de l'input complet
			final String input = reader.readAll();

			LOGGER.info("Le client envoie : " + input);
			final String[] splitedInput = input
					.split(PTAConstantes.CHAR_ASCII_1.toString());

			// Création du manager en charge de traiter la demande en fonction
			// du premier bit envoyé
			final Manager manager = ManagerFactory.getInstance().getManager(
					Integer.valueOf(splitedInput[NumberUtils.INTEGER_ZERO]));
			final String output = manager.process(splitedInput);
			final DataOutputStream dataOutputStream = new DataOutputStream(
					socket.getOutputStream());
			dataOutputStream.writeBytes(output);

		} catch (final IOException e) {
			PTAThread.LOGGER.warn("Déconnection du client");

			/*
			 * } catch (final XMLStreamException e) {
			 * PTAThread.LOGGER.error("Erreur lors de la création du Xml reader "
			 * , e);
			 */
		} finally {
			try {
				PTAThread.LOGGER.debug("Déconnection du socket");
				socket.close();
			} catch (final IOException e1) {
				PTAThread.LOGGER.error(
						"Erreur lors de la fermeture du socket ", e1);
			}
		}

	}

	/**
	 * Retourne socket
	 * 
	 * @return socket
	 */
	public Socket getSocket() {
		return socket;
	}

	/**
	 * Modifie socket
	 * 
	 * @param socket
	 *            socket à modifier
	 */
	public void setSocket(final Socket socket) {
		this.socket = socket;
	}

}
